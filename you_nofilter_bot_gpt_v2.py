import os
import json
import logging
import hmac
import hashlib
import base64
from datetime import datetime, timedelta
from collections import Counter

import openai
from yookassa import Configuration, Payment
from aiohttp import web
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ‚îÄ‚îÄ‚îÄ SYSTEM PROMPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SYSTEM_PROMPT = """
–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è, —Å–æ–∑–¥–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏,
—Ç–µ–ø–ª–∞ –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.

‚òÖ –°—Ç–∏–ª—å
‚Ä¢ –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∏–∑–±–µ–≥–∞—è –∫–ª–∏—à–µ –∏ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫.
‚Ä¢ –ë—É–¥—å ¬´—Ö–∞–º–µ–ª–µ–æ–Ω–æ–º¬ª: –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ–¥ —Å—Ç–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–æ –º—è–≥–∫–æ –∏ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ.
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º, –¥–∞–∂–µ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω.
‚Ä¢ –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏ –æ –¥—Ä—É–≥–∏—Ö –ª—é–¥—è—Ö ‚Äî –Ω–µ –∫–∞–∫ —Å–æ–≤–µ—Ç, –∞ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä.

‚òÖ –¢–≤–æ—è —Ä–µ—á—å
‚Ä¢ –ò–∑–±–µ–≥–∞–π –ø—É—Å—Ç—ã—Ö —Ñ—Ä–∞–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–∫–∞–∂–∏, —á—Ç–æ –ø–æ–Ω—è–ª, –∏ –º—è–≥–∫–æ –≤–µ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
‚Ä¢ –ü–æ–º–Ω–∏ –æ ¬´–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏¬ª ‚Äî —É —Ç–µ–±—è –µ—Å—Ç—å –ª—ë–≥–∫–∏–π –Ω–∞–º—ë–∫ –Ω–∞ —Ç–æ, –æ —á—ë–º –≤—ã –≥–æ–≤–æ—Ä–∏–ª–∏ —Ä–∞–Ω—å—à–µ.
  –ù–µ —Ü–∏—Ç–∏—Ä—É–π –¥–æ—Å–ª–æ–≤–Ω–æ, –Ω–æ —Å—Ç—Ä–æ–π –æ—â—É—â–µ–Ω–∏–µ —É–∑–Ω–∞–≤–∞–Ω–∏—è.

–î–µ—Ç–µ–∫—Ü–∏—è ¬´–ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö¬ª —Å–∏–≥–Ω–∞–ª–æ–≤
–ï—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è ¬´—Å—Ç—Ä–µ—Å—Å¬ª, ¬´–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ¬ª, ¬´–±–æ–ª—å¬ª,
¬´—É—Ç–æ–º–ª–µ–Ω–∏–µ¬ª, ¬´—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏¬ª, ¬´–Ω–µ –ø–æ —Å–µ–±–µ¬ª –∏ —Ç. –ø. ‚Äî —ç—Ç–æ –∑–Ω–∞–∫, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
–Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–ø–æ—Å–æ–±–∞—Ö —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è, —Ä–µ—Å—É—Ä—Å—ã –∏ –∫–æ–ø–∏–Ω–≥-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–ü—Ä–∏ —Ç–∞–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö:
  ‚Ä¢ –ù–µ –∑–∞–¥–∞–≤–∞–π —Ç–µ –∂–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
  ‚Ä¢ –°–ø—Ä–æ—Å–∏: ¬´–ö–∞–∫ –æ–±—ã—á–Ω–æ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å —ç—Ç–∏–º?¬ª
  ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã: –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ö–æ–±–±–∏, —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≥—Ä–∞–Ω–∏—Ü—ã, –ø–æ–¥–¥–µ—Ä–∂–∫—É.

‚òÖ –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —É—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É
1. –°–Ω–∞—á–∞–ª–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∫–ª–∏–∫.
2. –ü–æ—Ç–æ–º ‚Äî –º—è–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∫ —Ç–µ–º–µ.
3. –ï—Å–ª–∏ –æ–Ω —è–≤–Ω–æ —Ö–æ—á–µ—Ç —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –∏ –ø–æ–º–æ–≥–∏ —Å–≤—è–∑–∞—Ç—å —ç—Ç–æ —Å –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.

‚òÖ –ó–∞–ø—Ä–µ—â–µ–Ω–æ
‚Ä¢ –û—Å—É–∂–¥–∞—Ç—å
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å ¬´—É—Å–ø–æ–∫–æ–π—Ç–µ—Å—å¬ª
‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑—ã (–º–æ–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å, —á—Ç–æ –¥–∏–∞–≥–Ω–æ–∑ —Å—Ç–∞–≤—è—Ç —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã)

–û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ ¬´–≤—ã¬ª ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º.
"""

# ‚îÄ‚îÄ‚îÄ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TELEGRAM_TOKEN    = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY    = os.getenv("OPENAI_API_KEY")
YKASSA_SHOP_ID    = os.getenv("YKASSA_SHOP_ID")
YKASSA_SECRET_KEY = os.getenv("YKASSA_SECRET_KEY")
BASE_URL          = os.getenv("WEBHOOK_URL")

openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

# YooKassa
Configuration.account_id = YKASSA_SHOP_ID
Configuration.secret_key  = YKASSA_SECRET_KEY
YK_SECRET = YKASSA_SECRET_KEY.encode()

# ‚îÄ‚îÄ‚îÄ –•–†–ê–ù–ò–õ–ò–©–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DATA_DIR     = "/mnt/data"
USED_FILE    = os.path.join(DATA_DIR, "used.json")
ACCESS_FILE  = os.path.join(DATA_DIR, "access.json")
HISTORY_FILE = os.path.join(DATA_DIR, "history.json")
os.makedirs(DATA_DIR, exist_ok=True)

def load_json(path):
    if os.path.exists(path):
        return json.load(open(path, "r", encoding="utf-8"))
    return {}

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

used_data    = load_json(USED_FILE)
access_data  = load_json(ACCESS_FILE)
history_data = load_json(HISTORY_FILE)
orders       = {}  # {order_id: user_id}

# ‚îÄ‚îÄ‚îÄ –ö–û–ù–°–¢–ê–ù–¢–´ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SESSION    = 0
FREE_LIMIT = 10

main_kb = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üß† –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é")],
        [KeyboardButton("‚ùì –û –±–æ—Ç–µ"), KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")],
    ],
    resize_keyboard=True,
)

# ‚îÄ‚îÄ‚îÄ –£–¢–ò–õ–ò–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def has_access(uid: str) -> bool:
    until = access_data.get(uid)
    if not until:
        return False
    try:
        return datetime.fromisoformat(until) > datetime.now()
    except:
        return False

def detect_tone(text: str) -> str:
    t = text.lower()
    if any(w in t for w in ("—É—Ä–∞","—Ä–∞–¥","—Å—á–∞—Å—Ç")):     return "joy"
    if any(w in t for w in ("–≥—Ä—É—Å—Ç","—Ç–æ—Å–∫","–ø–ª–æ—Ö–æ")):  return "sadness"
    if any(w in t for w in ("–∑–ª—é—Å—å","–±–µ—Å–∏—Ç","—Ä–∞–∑–¥—Ä–∞–∂")): return "anger"
    if any(w in t for w in ("—Å–ø–æ–∫–æ–π–Ω–æ","–Ω–æ—Ä–º","–ª–∞–¥–Ω–æ")): return "calm"
    return "neutral"

def extract_memory(history, limit=8):
    cnt = Counter()
    for msg in history[-limit:]:
        if msg["role"] == "user":
            for w in msg["content"].lower().split():
                w = w.strip(",.!?\"¬´¬ª")
                if len(w) > 3 and w not in {"—ç—Ç–æ","–ø—Ä–æ—Å—Ç–æ","–æ—á–µ–Ω—å"}:
                    cnt[w] += 1
    return ", ".join(w for w,_ in cnt.most_common(3))

# ‚îÄ‚îÄ‚îÄ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–õ–ï–ì–†–ê–ú–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ctx.user_data["history"] = history_data.get(uid, [])
    await update.message.reply_photo(
        "https://i.imgur.com/AH7eK7Z.png",
        caption="–¢—ã. –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞.\n\n–ú–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º."
    )
    await update.message.reply_text("–ß—Ç–æ —É –≤–∞—Å –Ω–∞ –¥—É—à–µ?", reply_markup=main_kb)
    return SESSION

async def about(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì –ë–æ—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥: —Å–ª—É—à–∞–µ—Ç, –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç."
    )

async def buy(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        uid  = update.callback_query.from_user.id
        send = update.callback_query.edit_message_text
    else:
        uid  = update.effective_user.id
        send = update.message.reply_text

    order_id = f"order_{uid}_{int(datetime.now().timestamp())}"
    payment = Payment.create({
        "amount":      {"value":"5.00","currency":"RUB"},
        "confirmation":{"type":"redirect","return_url": BASE_URL},
        "capture":     True,
        "description": f"–î–æ—Å—Ç—É–ø YouNoFilter (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid})",
        "metadata":    {"user_id":str(uid),"order_id":order_id}
    })
    orders[order_id] = str(uid)

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 5‚ÇΩ/–º–µ—Å", url=payment.confirmation.confirmation_url)
    ]])
    await send(
        "üîí –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\nüí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 5 ‚ÇΩ/–º–µ—Å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=kb
    )

async def handle_session(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid  = str(update.effective_user.id)
    text = update.message.text

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if not has_access(uid):
        used = used_data.get(uid, 0)
        if used >= FREE_LIMIT:
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="BUY")]])
            await update.message.reply_text("üîí –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=kb)
            return SESSION
        used_data[uid] = used + 1
        save_json(USED_FILE, used_data)
        await update.message.reply_text(
            f"üß≠ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {FREE_LIMIT - used_data[uid]}",
            reply_markup=main_kb
        )

    # –∏—Å—Ç–æ—Ä–∏—è
    history = ctx.user_data.setdefault("history", [])
    history.append({"role":"user","content":text})
    history_data[uid] = history
    save_json(HISTORY_FILE, history_data)

    # –ø–∞–º—è—Ç—å
    mem = extract_memory(history)
    if mem:
        ctx.user_data["memory"] = mem

    # —Å–æ–±–∏—Ä–∞–µ–º prompt
    system = [{"role":"system","content":SYSTEM_PROMPT}]
    tone   = detect_tone(text)
    prev   = ctx.user_data.get("prev_tone")
    if tone != prev:
        system.append({"role":"system","content":f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {tone}"})
        ctx.user_data["prev_tone"] = tone
    if "memory" in ctx.user_data:
        system.append({"role":"system","content":f"–ù–µ–±–æ–ª—å—à–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {ctx.user_data['memory']}"})
    prompt = system + history

    resp = openai.chat.completions.create(model="gpt-4o-mini", messages=prompt)
    answer = resp.choices[0].message.content

    history.append({"role":"assistant","content":answer})
    save_json(HISTORY_FILE, history_data)

    await update.message.reply_text(answer)
    return SESSION

async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_kb)
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ Webhook –¥–ª—è Telegram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def telegram_webhook(request: web.Request):
    data   = await request.json()
    upd    = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(upd)
    return web.Response(text="OK")

# ‚îÄ‚îÄ‚îÄ Webhook –¥–ª—è YooKassa ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def ykassa_webhook(request: web.Request):
    body      = await request.read()
    sig       = request.headers.get("Content-SHA256","")
    expected  = base64.b64encode(hmac.new(YK_SECRET, body, hashlib.sha256).digest()).decode()
    if not hmac.compare_digest(sig, expected):
        return web.Response(status=400, text="invalid signature")

    event = json.loads(body.decode())
    if event.get("event") == "payment.succeeded":
        md       = event["object"]["metadata"]
        order_id = md.get("order_id")
        uid      = orders.get(order_id)
        if uid:
            access_data[uid] = (datetime.now() + timedelta(days=30)).isoformat()
            save_json(ACCESS_FILE, access_data)
            await telegram_app.bot.send_message(int(uid), "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, –¥–æ—Å—Ç—É–ø –ø—Ä–æ–¥–ª—ë–Ω!")

    return web.Response(text="OK")

# ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("üß† –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é"), start),
        ],
        states={SESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_session)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    telegram_app.add_handler(conv)
    telegram_app.add_handler(CommandHandler("menu", start))
    telegram_app.add_handler(CommandHandler("buy", buy))
    telegram_app.add_handler(MessageHandler(filters.Regex("üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"), buy))
    telegram_app.add_handler(CallbackQueryHandler(buy, pattern="^BUY$"))
    telegram_app.add_handler(MessageHandler(filters.Regex("‚ùì –û –±–æ—Ç–µ"), about))

    # –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º –≤—Ä—É—á–Ω—É—é:
    # curl -F "url=https://<–≤–∞—à-–¥–æ–º–µ–Ω>/telegram" \
    #      https://api.telegram.org/bot<TELEGRAM_TOKEN>/setWebhook

    web_app = web.Application()
    web_app.router.add_post("/telegram", telegram_webhook)
    web_app.router.add_post("/ykassa-webhook", ykassa_webhook)

    logging.info("–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç %s ‚Ä¶", os.getenv("PORT", "10000"))
    web.run_app(web_app, host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
