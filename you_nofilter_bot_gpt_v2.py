
import os
import json
import openai
import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from collections import Counter

SYSTEM_PROMPT = """
–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥.  
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è, —Å–æ–∑–¥–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç–µ–ø–ª–∞ –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.

‚òÖ –°—Ç–∏–ª—å  
‚Ä¢ –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∏–∑–±–µ–≥–∞—è –∫–ª–∏—à–µ –∏ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫.  
‚Ä¢ –ë—É–¥—å ¬´—Ö–∞–º–µ–ª–µ–æ–Ω–æ–º¬ª: –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ–¥ —Å—Ç–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–æ –º—è–≥–∫–æ –∏ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ.  
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º, –¥–∞–∂–µ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω.  
‚Ä¢ –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–º, –∫–∞–∫ —ç—Ç–æ –±—ã–≤–∞–µ—Ç —É –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π ‚Äî –Ω–µ –∫–∞–∫ —Å–æ–≤–µ—Ç, –∞ –∫–∞–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.

‚òÖ –¢–≤–æ—è —Ä–µ—á—å  
‚Ä¢ –ù–µ —Å–æ–≥–ª–∞—à–∞–π—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî –ª—É—á—à–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π, —É—Ç–æ—á–Ω–∏, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.  
‚Ä¢ –ò–∑–±–µ–≥–∞–π –ø—É—Å—Ç—ã—Ö —Ñ—Ä–∞–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –õ—É—á—à–µ –ø–æ–∫–∞–∂–∏, —á—Ç–æ –ø–æ–Ω—è–ª, –∏ –º—è–≥–∫–æ –≤–µ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.  
‚Ä¢ –ü–æ–º–Ω–∏, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å ¬´–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å¬ª ‚Äî —Ç—ã —É–∂–µ –æ–±—â–∞–ª—Å—è —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º —Ä–∞–Ω—å—à–µ. –ù–µ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –Ω–æ —Å—Ç—Ä–æ–π –æ—â—É—â–µ–Ω–∏–µ —É–∑–Ω–∞–≤–∞–Ω–∏—è.

‚òÖ –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —É—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É  
1. –°–Ω–∞—á–∞–ª–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –µ–≥–æ —Å–ª–æ–≤–∞.  
2. –ü–æ—Ç–æ–º ‚Äî –º—è–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∫ —Ç–µ–º–µ.  
3. –ï—Å–ª–∏ –æ–Ω —Ö–æ—á–µ—Ç —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏, –ø–æ–º–æ–≥–∏ —Å–≤—è–∑–∞—Ç—å —ç—Ç–æ —Å –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.

‚òÖ –ó–∞–ø—Ä–µ—â–µ–Ω–æ  
‚Ä¢ –û—Å—É–∂–¥–∞—Ç—å  
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å ¬´—É—Å–ø–æ–∫–æ–π—Ç–µ—Å—å¬ª  
‚Ä¢ –í—ã—Å—Ç–∞–≤–ª—è—Ç—å –¥–∏–∞–≥–Ω–æ–∑—ã –ø—Ä—è–º–æ, –Ω–æ –Ω–∞–º–µ–∫–∞—Ç—å –º–æ–∂–Ω–æ –∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏—Ç –ø—Ä—è–º–æ –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –¥–∏–∞–≥–Ω–æ–∑, –æ–≥–æ–≤–æ—Ä–∏—Å—å, —á—Ç–æ –¥–∏–∞–≥–Ω–æ–∑—ã —Å—Ç–∞–≤–∏—Ç—å –Ω–µ –º–æ–∂–µ—à—å, –Ω–æ –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –¥–∏–∞–≥–Ω–æ–∑

–û–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –Ω–∞ ¬´–≤—ã¬ª ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º.
"""

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

openai.api_key = OPENAI_API_KEY
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

SESSION, ASK_CONTACT = range(2)
YUMONEY_ACCOUNT = "410015497173415"
FREE_LIMIT = 10

DATA_DIR = "/mnt/data"
USED_FILE = os.path.join(DATA_DIR, "used_data.json")
ACCESS_FILE = os.path.join(DATA_DIR, "access_data.json")
HISTORY_FILE = os.path.join(DATA_DIR, "history_data.json")

access_data = {}

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üß† –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é")],
        [KeyboardButton("‚ùì –û –±–æ—Ç–µ")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

def load_used_data():
    global used_data
    if os.path.exists(USED_FILE):
        with open(USED_FILE, "r") as f:
            used_data = json.load(f)
    else:
        used_data = {}

def save_used_data(data):
    with open(USED_FILE, "w") as f:
        json.dump(data, f, indent=2)

def load_access_data():
    global access_data
    if os.path.exists(ACCESS_FILE):
        with open(ACCESS_FILE, "r") as f:
            access_data = json.load(f)
    else:
        access_data = {}

def save_access_data():
    global access_data
    with open(ACCESS_FILE, "w") as f:
        json.dump(access_data, f, indent=2)

load_used_data()

def has_access(user_id: int) -> bool:
    global access_data
    until_str = access_data.get(str(user_id))
    if not until_str:
        return False
    try:
        until = datetime.fromisoformat(until_str)
    except Exception:
        return False
    return until > datetime.now()

history_data = {}

def load_history_data():
    global history_data
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as f:
            history_data = json.load(f)
    else:
        history_data = {}

def save_history_data():
    with open(HISTORY_FILE, "w") as f:
        json.dump(history_data, f, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(
        photo="https://i.imgur.com/AH7eK7Z.png",
        caption="–¢—ã. –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞.\n\n–ú–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º."
    )
    context.user_data["history"] = []
    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –≤–Ω—É—Ç—Ä–∏ ‚Äî –∏ –º—ã –Ω–∞—á–Ω—ë–º.",
        reply_markup=main_keyboard
    )
    user_id = str(update.effective_user.id)
    context.user_data["history"] = history_data.get(user_id, [])
    return SESSION

async def handle_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    user_msg = update.message.text

    context.user_data.setdefault("history", [])

    if not has_access(int(user_id)):
        used = used_data.get(user_id, 0)

        if used >= FREE_LIMIT:
            await update.message.reply_text(
                f"–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {FREE_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
                "üîì –•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–≤—è–∑–∞–ª—Å—è —Å —Ç–æ–±–æ–π –∏ –æ—Ç–∫—Ä—ã–ª –¥–æ—Å—Ç—É–ø?",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton("–•–æ—á—É"), KeyboardButton("–ù–µ –Ω–∞–¥–æ")]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            return ASK_CONTACT

        used_data[user_id] = used + 1
        save_used_data(used_data)
        left = FREE_LIMIT - used_data[user_id]
        await update.message.reply_text(f"üß≠ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {left}")

    context.user_data["history"].append({"role": "user", "content": user_msg})
    history_data[user_id] = context.user_data["history"]
    save_history_data()

    # üß† –û–±–Ω–æ–≤–ª—è–µ–º ¬´–º—è–≥–∫—É—é –ø–∞–º—è—Ç—å¬ª
    memory = extract_memory(context.user_data["history"])
    if memory:
        context.user_data["memory"] = memory

    tone = detect_tone(user_msg)
    prev_tone = context.user_data.get("prev_tone")
    system_prompts = [{"role": "system", "content": SYSTEM_PROMPT}]

    if tone != prev_tone:
        system_prompts.append({
            "role": "system",
            "content": (
                f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {tone}. "
                "–ü–æ–¥—Å—Ç—Ä–æ–π –ª–µ–∫—Å–∏–∫—É –∏ —Ç–µ–º–ø –ø–æ–¥ —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, "
                "–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º."
            )
        })
        context.user_data["prev_tone"] = tone

    if context.user_data.get("memory"):
        system_prompts.append({
            "role": "system",
            "content": f"–†–∞–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–ª: {context.user_data['memory']}. –£—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ, –µ—Å–ª–∏ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç."
        })

    prompt = system_prompts + context.user_data["history"]

    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=prompt
    )

    reply = response.choices[0].message.content
    context.user_data["history"].append({"role": "assistant", "content": reply})
    await update.message.reply_text(reply)

    return SESSION

async def ask_contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑ username"
    choice = update.message.text.strip().lower()

    if choice == "—Ö–æ—á—É":
        text = f"üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —Å –Ω–∏–º —Å–≤—è–∑–∞–ª–∏—Å—å."
        await context.bot.send_message(chat_id=ADMIN_ID, text=text)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, —è –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –Ø —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –ø–æ–∑–∂–µ ü§ù", reply_markup=main_keyboard)
    else:
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –¥–æ—Å—Ç—É–ø –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –Ω–∞–∂–º–∏ /menu.", reply_markup=main_keyboard)

    return SESSION

def extract_memory(history, limit=8):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    keywords = []
    for msg in history[-limit:]:
        if msg["role"] == "user":
            content = msg["content"].lower()
            for word in content.split():
                w = word.strip(",.!?\"¬´¬ª")
                if len(w) > 3 and w not in {"—ç—Ç–æ", "–ø—Ä–æ—Å—Ç–æ", "–æ—á–µ–Ω—å", "—Ç–∞–∫–æ–π", "–∫–∞–∫–æ–π", "–∫–æ–≥–¥–∞"}:
                    keywords.append(w)
    common = [w for w, _ in Counter(keywords).most_common(3)]
    return ", ".join(common) if common else None

def detect_tone(text: str) -> str:
    """–ì—Ä—É–±–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    t = text.lower()

    joy     = {"—É—Ä–∞", "–∫—Ä—É—Ç–æ", "—Å—É–ø–µ—Ä", "—Ä–∞–¥", "—Å—á–∞—Å—Ç–ª"}
    sadness = {"–≥—Ä—É—Å—Ç", "—Ç–æ—Å–∫", "–ø–ª–æ—Ö–æ", "—Ç—è–∂–µ–ª–æ", "–¥–µ–ø—Ä–µ—Å—Å"}
    anger   = {"–±–µ—Å–∏—Ç", "–∑–ª—é—Å—å", "–Ω–µ–Ω–∞–≤–∏–∂", "—Ä–∞–∑–¥—Ä–∞–∂"}
    calm    = {"—Å–ø–æ–∫–æ–π–Ω–æ", "–Ω–æ—Ä–º", "–ª–∞–¥–Ω–æ", "–æ–∫"}

    if any(w in t for w in joy):      return "joy"
    if any(w in t for w in sadness):  return "sadness"
    if any(w in t for w in anger):    return "anger"
    if any(w in t for w in calm):     return "calm"
    return "neutral"
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏ ¬´üß† –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# async def buy(...) [–û–¢–ö–õ–Æ–ß–ï–ù–û]
    pass  # –æ—Ç–∫–ª—é—á–µ–Ω–æ

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì –≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ç–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ, –∑–∞–¥–∞—Ç—å –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –ø–æ-–Ω–æ–≤–æ–º—É. –í—Å–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã. –¢—ã. –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞."
    )

async def unlock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global access_data
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = update.message.text.split()
    if len(parts) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unlock <user_id> [–¥–Ω–µ–π]")
        return

    try:
        user_id = int(parts[1])
        days = int(parts[2]) if len(parts) > 2 else 30
    except ValueError:
        await update.message.reply_text("ID –∏ –¥–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    access_data[str(user_id)] = (datetime.now() + timedelta(days=days)).isoformat()
    save_access_data()
    access_list = context.application.bot_data.setdefault("access_list", {})
    access_list[user_id] = datetime.now() + timedelta(days=days)

    await update.message.reply_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {days} –¥–Ω–µ–π.")

if __name__ == "__main__":
    load_access_data()
    load_history_data()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("üß† –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é"), start)
        ],
        states={
            SESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_session)],
            ASK_CONTACT: [MessageHandler(filters.TEXT, ask_contact_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("unlock", unlock))
    app.add_handler(MessageHandler(filters.Regex("‚ùì –û –±–æ—Ç–µ"), about))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        webhook_url=WEBHOOK_URL,
    )
