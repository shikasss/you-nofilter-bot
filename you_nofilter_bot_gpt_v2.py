
import os
import json
import openai
import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

openai.api_key = OPENAI_API_KEY
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

SESSION, ASK_CONTACT = range(2)
YUMONEY_ACCOUNT = "410015497173415"
FREE_LIMIT = 10
USED_FILE = "used_messages.json"

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        KeyboardButton("üß† –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é"),
        KeyboardButton("‚ùì –û –±–æ—Ç–µ")
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

def load_used_data():
    if os.path.exists(USED_FILE):
        with open(USED_FILE, "r") as f:
            return json.load(f)
    return {}

def save_used_data(data):
    with open(USED_FILE, "w") as f:
        json.dump(data, f)

used_data = load_used_data()

def has_access(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    access = context.application.bot_data.get("access_list", {})
    until = access.get(user_id)
    return until and until > datetime.now()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(
        photo="https://i.imgur.com/AH7eK7Z.png",
        caption="–¢—ã. –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞.\n\n–ú–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º."
    )
    context.user_data["history"] = []
    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –≤–Ω—É—Ç—Ä–∏ ‚Äî –∏ –º—ã –Ω–∞—á–Ω—ë–º.",
        reply_markup=main_keyboard
    )
    return SESSION

async def handle_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    context.user_data.setdefault("history", [])

    if not has_access(context, int(user_id)):
        count = used_data.get(user_id, 0)
        if count >= FREE_LIMIT:
            await update.message.reply_text(
                f"–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {FREE_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
                f"üîì –•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–≤—è–∑–∞–ª—Å—è —Å —Ç–æ–±–æ–π –∏ –æ—Ç–∫—Ä—ã–ª –¥–æ—Å—Ç—É–ø?",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton("–•–æ—á—É"), KeyboardButton("–ù–µ –Ω–∞–¥–æ")]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            return ASK_CONTACT
        else:
            used_data[user_id] = count + 1
            save_used_data(used_data)
            left = FREE_LIMIT - used_data[user_id]
            await update.message.reply_text(f"üß≠ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {left}")

    user_input = update.message.text
    context.user_data["history"].append({"role": "user", "content": user_input})

    prompt = [
        {"role": "system", "content": "–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Å —Ç–µ–ø–ª–æ–º –∏ —É—á–∞—Å—Ç–∏–µ–º. –ü–æ–º–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫—É –ø–æ–Ω—è—Ç—å —Å–µ–±—è. –ù–µ –¥–∞–≤–∞–π –≥–æ—Ç–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –∞ –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π."}
    ] + context.user_data["history"]

    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=prompt
    )

    reply = response.choices[0].message.content
    context.user_data["history"].append({"role": "assistant", "content": reply})
    await update.message.reply_text(reply)
    return SESSION

async def ask_contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑ username"
    choice = update.message.text.strip().lower()

    if choice == "—Ö–æ—á—É":
        text = f"üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —Å –Ω–∏–º —Å–≤—è–∑–∞–ª–∏—Å—å."
        await context.bot.send_message(chat_id=ADMIN_ID, text=text)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, —è –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –Ø —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –ø–æ–∑–∂–µ ü§ù", reply_markup=main_keyboard)
    else:
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –¥–æ—Å—Ç—É–ø –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –Ω–∞–∂–º–∏ /menu.", reply_markup=main_keyboard)

    return SESSION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏ ¬´üß† –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# async def buy(...) [–û–¢–ö–õ–Æ–ß–ï–ù–û]
    pass  # –æ—Ç–∫–ª—é—á–µ–Ω–æ

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì –≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ç–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ, –∑–∞–¥–∞—Ç—å –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –ø–æ-–Ω–æ–≤–æ–º—É. –í—Å–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã. –¢—ã. –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞."
    )

async def unlock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = update.message.text.split()
    if len(parts) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unlock <user_id> [–¥–Ω–µ–π]")
        return

    try:
        user_id = int(parts[1])
        days = int(parts[2]) if len(parts) > 2 else 30
    except ValueError:
        await update.message.reply_text("ID –∏ –¥–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    access_list = context.application.bot_data.setdefault("access_list", {})
    access_list[user_id] = datetime.now() + timedelta(days=days)

    await update.message.reply_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {days} –¥–Ω–µ–π.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("üß† –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é"), start)
        ],
        states={
            SESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_session)],
            ASK_CONTACT: [MessageHandler(filters.TEXT, ask_contact_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("unlock", unlock))
        app.add_handler(MessageHandler(filters.Regex("‚ùì –û –±–æ—Ç–µ"), about))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        webhook_url=WEBHOOK_URL,
    )
